// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/josephzxy/work/lab/go/timer_apiserver/internal/resource/v1/service/service.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceRouter is a mock of ServiceRouter interface.
type MockServiceRouter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRouterMockRecorder
}

// MockServiceRouterMockRecorder is the mock recorder for MockServiceRouter.
type MockServiceRouterMockRecorder struct {
	mock *MockServiceRouter
}

// NewMockServiceRouter creates a new mock instance.
func NewMockServiceRouter(ctrl *gomock.Controller) *MockServiceRouter {
	mock := &MockServiceRouter{ctrl: ctrl}
	mock.recorder = &MockServiceRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRouter) EXPECT() *MockServiceRouterMockRecorder {
	return m.recorder
}

// Timer mocks base method.
func (m *MockServiceRouter) Timer() TimerService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timer")
	ret0, _ := ret[0].(TimerService)
	return ret0
}

// Timer indicates an expected call of Timer.
func (mr *MockServiceRouterMockRecorder) Timer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timer", reflect.TypeOf((*MockServiceRouter)(nil).Timer))
}
