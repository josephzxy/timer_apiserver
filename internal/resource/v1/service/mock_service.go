// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/josephzxy/timer_apiserver/internal/resource/v1/service (interfaces: ServiceRouter,TimerService)

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/josephzxy/timer_apiserver/internal/resource/v1/model"
)

// MockServiceRouter is a mock of ServiceRouter interface.
type MockServiceRouter struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRouterMockRecorder
}

// MockServiceRouterMockRecorder is the mock recorder for MockServiceRouter.
type MockServiceRouterMockRecorder struct {
	mock *MockServiceRouter
}

// NewMockServiceRouter creates a new mock instance.
func NewMockServiceRouter(ctrl *gomock.Controller) *MockServiceRouter {
	mock := &MockServiceRouter{ctrl: ctrl}
	mock.recorder = &MockServiceRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceRouter) EXPECT() *MockServiceRouterMockRecorder {
	return m.recorder
}

// Timer mocks base method.
func (m *MockServiceRouter) Timer() TimerService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timer")
	ret0, _ := ret[0].(TimerService)
	return ret0
}

// Timer indicates an expected call of Timer.
func (mr *MockServiceRouterMockRecorder) Timer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timer", reflect.TypeOf((*MockServiceRouter)(nil).Timer))
}

// MockTimerService is a mock of TimerService interface.
type MockTimerService struct {
	ctrl     *gomock.Controller
	recorder *MockTimerServiceMockRecorder
}

// MockTimerServiceMockRecorder is the mock recorder for MockTimerService.
type MockTimerServiceMockRecorder struct {
	mock *MockTimerService
}

// NewMockTimerService creates a new mock instance.
func NewMockTimerService(ctrl *gomock.Controller) *MockTimerService {
	mock := &MockTimerService{ctrl: ctrl}
	mock.recorder = &MockTimerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimerService) EXPECT() *MockTimerServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTimerService) Create(arg0 *model.Timer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTimerServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTimerService)(nil).Create), arg0)
}
